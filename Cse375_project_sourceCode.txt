Grammar:

grammar scratch_1;
root : conditions;

import_condition: 'include' ((Word)(','Word)*);
compare_op:


LESS
| GREATERTHAN
| EQUAL
| GREATEREQUAL
| LESSTHAN
| NOTEQUAL
|' &&& '
|' |||';


op:

ASSIGN
| PLUS
| MINUS
| STAR
| DOUBLESLASH
| SLASH
| PERCENTAGE;
Finishline: '#';
Number: [0-9]+ | ([0-9]* '.' [0-9]+);
ID: [a-zA-Z_][a-zA-Z0-9_]*;
PLUS_PLUS: '++';
MINUS_MINUS: '--';



ASSIGN: '=';
PERCENTAGE: '%%';
PLUS: '+';
MINUS: '-';
STAR: '*';
LESSTHAN:'<<';
DOUBLESTAR: '**';
GREATERTHAN:'>>';
SLASH: '/';
DOUBLESLASH: '//';
PERCENT: '%';
String: Quatation1 Word* Quatation2;
NULL: 'null';
Quatation1: '///';
Quatation2: '\\';

NEWSentence:'\new';
LESS: '<';
GREATER: '>';
LESSEQUAL: '<=';
GREATEREQUAL: '>=';
EQUAL: '==';
NOTEQUAL: '!!';
HASHTAG:'##';
COMMENT: ('$$$'Word*) -> skip;
Word:':*'[a-zA-Z]

        | [0-9]

        | [!"#$%&'()*+,-./:[\]\\;<=>?@^_`{|}~ ];


returnCondition:

'gives'
(
(
(
variable_val(op|compare_op)
variable_val

)


| variable
| Number
| string
| array
| Word
)
(

(
(
variable_val(op|compare_op)
variable_val
)


| variable
| Number
| string
| array
| Word


)
)*
)*COMMENT?;

if_condition:
(
'iif' '{'compare'}' term el_if_condition*
else_condition?);
else_condition:'else'term;
el_if_condition:'eliif''{'compare'}'term ;
compare: variable(compare_op(variable|Number|string|Word|array|NULL)
);


for_loop:
'for' '{' (variable | exp|varible_declare)';'compare';'
variable (
(compare_op Number)|(PLUS_PLUS|MINUS_MINUS)
)'}'term;

while_condition: 'while{' (variable | compare ) '}' term;



function:(
('<'void'>')|('<'declare_type(','declare_type)* '>')) variable '('parameter?(','parameter)*')'term;
parameter: declare_type? variable;

function_call: variable '(' arguments ')';
arguments:(variable|Number|string|function_call)?(':'(variable|Number|string|(function_call))
)*;


structure_segment: ('structure ' | 'union') variable '('
structure_segment_main ')';

structure_segment_main: (
varible_declare HASHTAG
| function
)+ ;


term: '(' conditions ')';
conditions: (
if_condition
| structure_segment
| import_condition HASHTAG
| varible_declare HASHTAG
| (exp HASHTAG)
| function
| COMMENT
| function_call HASHTAG
| for_loop
| while_condition
| term
| returnCondition HASHTAG
| 'break' HASHTAG
| 'continue' HASHTAG
)* ;

variable:ID ('.' ID)*;
varible_declare:
declare_type variable_inital (':' variable_inital)* ;
variable_inital: variable (ASSIGN (Number | string | array_initial))?;
declare_type: (int | string| bool | float | array | void);




array_initial: '[' (Number | string) (':' (Number | string))* ']';
array: 'array';
int: 'int';
string: 'string';
bool: 'bool';
float: 'float';
void: 'void';

exp: (
variable (':' variable) * compare_op (
exp_right
|(

(op | compare_op)? '(' exp_right ')' (
op
| compare_op
)?
)
)+
)

|null_exp
| two_ways_assign;
exp_right: (
variable_val((compare_op | op) variable_val)*
);

variable_val: (Number| string | array_initial | function_call | variable);
null_exp: ((Number|string | variable) op (Number | string | variable))

| ('(' (Number) op (Number) ')');

two_ways_assign:
variable ':' variable (compare_op| op compare) (
variable
| Number
| string
| NULL
) ',' (variable | Number | string | NULL);
